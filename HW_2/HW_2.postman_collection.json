{
	"info": {
		"_postman_id": "6e2c2e2d-0061-4bd5-9196-a664b5260af1",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19233185"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Correct type\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}/first",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3.Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"let family = jsonData.family\r",
							"let salary_1_5 = jsonData.u_salary_1_5_year\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test('Correct name', function () {\r",
							"    pm.expect(name).to.eql('Mikhail')\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test('Correct age', function () {\r",
							"    pm.expect(age).to.eql('30')\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test('Correct salary', function () {\r",
							"    pm.expect(salary).to.eql(60000)\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let rqst = request.data\r",
							"let rqst_name = rqst.name\r",
							"let rqst_age = rqst.age\r",
							"let rqst_salary = rqst.salary\r",
							"let rqst_salary_1_5 = rqst.u_salary_1_5_year\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Correct rqst_name', function () {\r",
							"    pm.expect(rqst_name).to.eql('Mikhail')\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Correct rqst_age', function () {\r",
							"    pm.expect(rqst_age).to.eql('30')\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Correct rqst_salary', function () {\r",
							"    pm.expect(rqst_salary).to.eql('60000')\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log('response family', family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('Correct u_salary_1_5_year', function () {\r",
							"    pm.expect(rqst_salary_1_5).to.eql(salary_1_5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}/user_info_3",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = String(jsonData.salary)\r",
							"let family = jsonData.family\r",
							"let dog = jsonData.family.pets.dog\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let rqst = pm.request.url.query.toObject()\r",
							"let rqst_name = rqst.name\r",
							"let rqst_age = rqst.age\r",
							"let rqst_salary = rqst.salary\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Correct rqst_name', function () {\r",
							"    pm.expect(rqst_name).to.eql(name)\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Correct rqst_age', function () {\r",
							"    pm.expect(rqst_age).to.eql(age)\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Correct rqst_salary', function () {\r",
							"    pm.expect(rqst_salary).to.eql(salary)\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log('response family', family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('dog_name', function () {\r",
							"    pm.expect(dog).to.have.property('name')\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('dog_age', function () {\r",
							"    pm.expect(dog).to.have.property('age')\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('Correct_name', function () {\r",
							"    pm.expect(dog_name).to.have.eql('Luky')\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('Correct_age', function () {\r",
							"    pm.expect(dog_age).to.have.eql(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = String(jsonData.age)\r",
							"let salary = jsonData.salary\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let rqst = pm.request.url.query.toObject()\r",
							"let rqst_name = rqst.name\r",
							"let rqst_age = rqst.age\r",
							"let rqst_salary = rqst.salary\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Correct rqst_name', function () {\r",
							"    pm.expect(rqst_name).to.eql(name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Correct rqst_age', function () {\r",
							"    pm.expect(rqst_age).to.eql(age)\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Request salary =\", rqst_salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"response salary =\", salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"response salary =\", salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary =\", salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary =\", salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Correct rqst_salary[0]', function () {\r",
							"    pm.expect(String(salary[0])).to.eql(rqst_salary)\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Correct rqst_salary[1]', function () {\r",
							"    pm.expect(salary[1]).to.eql(String(rqst_salary*2))\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Correct rqst_salary[2]', function () {\r",
							"    pm.expect(salary[2]).to.eql(String(rqst_salary*3))\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", rqst.name)\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", rqst.age)\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", rqst.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// идеальный метод: salary.forEach((item) => {console.log(item)}) \r",
							"\r",
							"for (i = 0; i < salary.length; i++ ) {\r",
							"    console.log(salary[i])\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let rqst = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('JSON response have start_qa_salary', function () {\r",
							"    pm.expect(pm.response.text()).to.include('start_qa_salary')\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('JSON response have qa_salary_after_6_months', function () {\r",
							"    pm.expect(pm.response.text()).to.include('qa_salary_after_6_months')\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('JSON response have qa_salary_after_12_months', function () {\r",
							"    pm.expect(pm.response.text()).to.include('qa_salary_after_12_months')\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('JSON response have qa_salary_after_1.5_year', function () {\r",
							"    pm.expect(pm.response.text()).to.include('qa_salary_after_1.5_year')\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('JSON response have qa_salary_after_3.5_years', function () {\r",
							"    pm.expect(pm.response.text()).to.include('qa_salary_after_3.5_years')\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test('JSON response have person', function () {\r",
							"    pm.expect(pm.response.text()).to.include('person')\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Check start_qa_salary == rqst.salary', function (){\r",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(rqst.salary)\r",
							"});\r",
							"    \r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Check qa_salary_after_6_months == salary*2', function (){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(rqst.salary * 2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('Check qa_salary_after_12_months == salary*2.7', function (){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(rqst.salary * 2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('Check qa_salary_after_1.5_year == salary*3.3', function (){\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(rqst.salary * 3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('Check qa_salary_after_3.5_year == salary*3.8', function (){\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(rqst.salary * 3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('Check 1-st element in u_name == rqst.salary', function () {\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(rqst.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('Check u_age == rqst.age', function () {\r",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(rqst.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('u_salary_5_years == rqst.salary*4.2', function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(rqst.salary *4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in jsonData.person){\r",
							"    console.log(i + ' : ' + jsonData.person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}/user_info_2",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		}
	]
}